// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManagementSystem.Data;

#nullable disable

namespace TaskManagementSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250313141511_addNotifications")]
    partial class addNotifications
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "78008aac-8b78-49d0-9466-0daf616a8f54",
                            ConcurrencyStamp = "78008aac-8b78-49d0-9466-0daf616a8f54",
                            Name = "Instructor",
                            NormalizedName = "INSTRUCTOR"
                        },
                        new
                        {
                            Id = "d2ea87dc-3d18-419c-8f3f-1bcf1aacedeb",
                            ConcurrencyStamp = "d2ea87dc-3d18-419c-8f3f-1bcf1aacedeb",
                            Name = "Trainee",
                            NormalizedName = "TRAINEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8d319a16-abef-497a-ba9e-6db56d4f5240",
                            RoleId = "78008aac-8b78-49d0-9466-0daf616a8f54"
                        },
                        new
                        {
                            UserId = "c5eed8d5-1d13-4c55-8890-568d84b886c0",
                            RoleId = "78008aac-8b78-49d0-9466-0daf616a8f54"
                        },
                        new
                        {
                            UserId = "a14d2bcd-313a-42f9-af3c-7fcca268079b",
                            RoleId = "78008aac-8b78-49d0-9466-0daf616a8f54"
                        },
                        new
                        {
                            UserId = "25845815-f006-4cb8-9bb9-9b9a3b6583b5",
                            RoleId = "d2ea87dc-3d18-419c-8f3f-1bcf1aacedeb"
                        },
                        new
                        {
                            UserId = "860c7039-f168-4451-93f8-7bf4401ad338",
                            RoleId = "d2ea87dc-3d18-419c-8f3f-1bcf1aacedeb"
                        },
                        new
                        {
                            UserId = "b95e4901-d167-4411-8eeb-5f4fc381800f",
                            RoleId = "d2ea87dc-3d18-419c-8f3f-1bcf1aacedeb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Domains.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8d319a16-abef-497a-ba9e-6db56d4f5240",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68ed8451-a127-4151-83ab-945fd6832f0a",
                            Email = "instructor1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "INSTRUCTOR1@GMAIL.COM",
                            NormalizedUserName = "INSTRUCTOR1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFDkPT05C2fB5++8Z5p4Do6sEU00R3a3054jBrMjN48Ce7tt0QNtLW2FDCB/IOMlzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "RHXAFCSNL6T4FPUOPEUT4Z36UJU2P3ZJ",
                            TwoFactorEnabled = false,
                            UserName = "instructor1@gmail.com"
                        },
                        new
                        {
                            Id = "c5eed8d5-1d13-4c55-8890-568d84b886c0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "151f5b02-a78d-48df-b899-e6ed00daf8b9",
                            Email = "instructor2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "INSTRUCTOR2@GMAIL.COM",
                            NormalizedUserName = "INSTRUCTOR2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED4ykt2Zv+17YHJPsVda9kfG8dxpYeXVLOmF+O+kFTl2WUVimRKAgNW/XsF6eMvzcw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "HCS6343ZS4TFLC2EKWQKNYURWUW2VVK5",
                            TwoFactorEnabled = false,
                            UserName = "instructor2@gmail.com"
                        },
                        new
                        {
                            Id = "a14d2bcd-313a-42f9-af3c-7fcca268079b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d3a1175-26b5-475a-a175-2cdcbb7b95b4",
                            Email = "instructor3@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "INSTRUCTOR3@GMAIL.COM",
                            NormalizedUserName = "INSTRUCTOR3@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOjAcchy2vaXJt7Tm8Ch+GCo4REthxBvwm2qv0X40c5rWRS7s/XceSLbkN9gXYZbCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "SCCJQAWMIKGSHXY4RHB44NF3K7PQFKXI",
                            TwoFactorEnabled = false,
                            UserName = "instructor3@gmail.com"
                        },
                        new
                        {
                            Id = "25845815-f006-4cb8-9bb9-9b9a3b6583b5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9030550-06c9-4213-9f24-19697aaba6a0",
                            Email = "trainee1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "TRAINEE1@GMAIL.COM",
                            NormalizedUserName = "TRAINEE1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDr1ZNDBPBddcwTxPXf/4BCRhD/2PDka4plWqeGbw7AIIUpxMODeMvmyuqDtqFiWGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "DHX2PQMGGNYKVEGZOU6E2EMDSP7RPSFN",
                            TwoFactorEnabled = false,
                            UserName = "trainee1@gmail.com"
                        },
                        new
                        {
                            Id = "860c7039-f168-4451-93f8-7bf4401ad338",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b1a18c83-b043-40c7-a3bb-2a2c263a4137",
                            Email = "trainee2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "TRAINEE2@GMAIL.COM",
                            NormalizedUserName = "TRAINEE2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGPvpfSX/4uPJSkzzjvWMIgQl3pn+RTs6N+ReLuP9UCi+QqsirR59gpIN6E3UGl6SA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ZF7PM3DFAVY3MJEP5YG56ACEERIDLIO3",
                            TwoFactorEnabled = false,
                            UserName = "trainee2@gmail.com"
                        },
                        new
                        {
                            Id = "b95e4901-d167-4411-8eeb-5f4fc381800f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "350c7103-79a5-427a-8dbb-e93e7719a018",
                            Email = "trainee3@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "TRAINEE3@GMAIL.COM",
                            NormalizedUserName = "TRAINEE3@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPRV7JInwdlfew9SMSDAEZq81kZ6BQcmJX5bM6hyX7t3FUHZgfJZOuP1Sz3oLGc32A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "UNQGWJVRKDAICZFWNHJ73PLNUZ6P7QA4",
                            TwoFactorEnabled = false,
                            UserName = "trainee3@gmail.com"
                        });
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Domains.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = "8d319a16-abef-497a-ba9e-6db56d4f5240",
                            IsDeleted = false,
                            Name = "Instructor 1"
                        },
                        new
                        {
                            Id = 2,
                            AccountId = "c5eed8d5-1d13-4c55-8890-568d84b886c0",
                            IsDeleted = false,
                            Name = "Instructor 2"
                        },
                        new
                        {
                            Id = 3,
                            AccountId = "a14d2bcd-313a-42f9-af3c-7fcca268079b",
                            IsDeleted = false,
                            Name = "Instructor 3"
                        });
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Domains.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Domains.Tasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Domains.Trainee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Trainees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = "25845815-f006-4cb8-9bb9-9b9a3b6583b5",
                            IsDeleted = false,
                            Name = "Trainee 1"
                        },
                        new
                        {
                            Id = 2,
                            AccountId = "860c7039-f168-4451-93f8-7bf4401ad338",
                            IsDeleted = false,
                            Name = "Trainee 2"
                        },
                        new
                        {
                            Id = 3,
                            AccountId = "b95e4901-d167-4411-8eeb-5f4fc381800f",
                            IsDeleted = false,
                            Name = "Trainee 3"
                        });
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Domains.TraineeTask", b =>
                {
                    b.Property<int>("TraineeId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("TraineeId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TraineeTasks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TaskManagementSystem.Models.Domains.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TaskManagementSystem.Models.Domains.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagementSystem.Models.Domains.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TaskManagementSystem.Models.Domains.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Domains.Instructor", b =>
                {
                    b.HasOne("TaskManagementSystem.Models.Domains.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Domains.Notification", b =>
                {
                    b.HasOne("TaskManagementSystem.Models.Domains.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Domains.Tasks", b =>
                {
                    b.HasOne("TaskManagementSystem.Models.Domains.Instructor", "Instructor")
                        .WithMany("Tasks")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Domains.Trainee", b =>
                {
                    b.HasOne("TaskManagementSystem.Models.Domains.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Domains.TraineeTask", b =>
                {
                    b.HasOne("TaskManagementSystem.Models.Domains.Tasks", "Task")
                        .WithMany("TraineeTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaskManagementSystem.Models.Domains.Trainee", "Trainee")
                        .WithMany("TraineeTasks")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Domains.Instructor", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Domains.Tasks", b =>
                {
                    b.Navigation("TraineeTasks");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Domains.Trainee", b =>
                {
                    b.Navigation("TraineeTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
